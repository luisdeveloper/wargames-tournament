pipeline{
    agent any
    
    environment {
        JAR_GROUP_ID = "com.git.luisdeveloper"
        JAR_ARTIFACT_ID = "wargames-tournament"
        JAR_VERSION = "0.0.1-SNAPSHOT"
        JAR_REPO_URL = "https://maven.pkg.github.com/luisdeveloper/wargames-tournament"
        LOCAL_JAR_PATH = "${JAR_ARTIFACT_ID}-${JAR_VERSION}.jar"
        DOCKER_IMAGE    = "wargames-tournament-app"
    	CONTAINER_NAME  = "wargames-tournament-container"
    	DB_CONTAINER    = "wargames-postgres"
    	DOCKER_NET      = "wargames-net"
    }
    
    stages{
        stage("Clean workspace"){
            steps{
                deleteDir()    
            }
        }
        stage("Download Dockerfile"){
            steps{
                git 'https://github.com/luisdeveloper/wargames-tournament'
            }
        }
        stage("Download JAR"){
            steps{
                sh '''
                            mkdir -p ~/.m2
                            mvn dependency:get \
                          -DgroupId=${JAR_GROUP_ID} \
                          -DartifactId=${JAR_ARTIFACT_ID} \
                          -Dversion=${JAR_VERSION} \
                          -DrepoUrl=${JAR_REPO_URL} \
                          -Dtransitive=false \
                          -U
                          
                          cp ~/.m2/repository/$(echo ${JAR_GROUP_ID} | tr '.' '/')/${JAR_ARTIFACT_ID}/${JAR_VERSION}/${JAR_ARTIFACT_ID}-${JAR_VERSION}.jar app.jar
                        '''
            }
        }
        stage("Create Docker Image"){
            steps{
                sh 'docker build -t ${DOCKER_IMAGE} .'
            }
        }
        stage('Start Postgres (separate container)') {
      steps {
        sh '''
          docker network create ${DOCKER_NET} || true

          docker rm -f ${DB_CONTAINER} || true
          docker run -d --name ${DB_CONTAINER} --network ${DOCKER_NET} \
            -e POSTGRES_DB=tournament \
            -e POSTGRES_USER=postgres \
            -e POSTGRES_PASSWORD=postgres \
            -p 5432:5432 \
            postgres:15

          # Esperar a que est√© listo
          for i in {1..30}; do
            docker exec ${DB_CONTAINER} pg_isready -U postgres && break
            sleep 2
          done
        '''
      }}
      
        stage('Run App Container') {
      steps {
        sh '''
          docker rm -f ${CONTAINER_NAME} || true
          docker run -d --name ${CONTAINER_NAME} --network ${DOCKER_NET} \
            -p 8081:8080 \
            -e SPRING_PROFILES_ACTIVE=prod \
            -e DB_URL=jdbc:postgresql://${DB_CONTAINER}:5432/tournament \
            -e DB_USER=postgres \
            -e DB_PASSWORD=postgres \
            ${DOCKER_IMAGE}
        '''
      }
    }
        
    }
}